<%#
 Copyright 2018 the original author or authors from the Simlife project.

 This file is part of the Simlife project, see https://www.simlife.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  shouldDeployService:
    Type: String
    Description: Should the ECS service be initialised
    AllowedValues:
        - true
        - false
    Default: false
  parentStackName:
    Type: String
  repositoryName:
    Type: String
    Description: Name of the Container Repository to Create
  databaseName:
    Type: String
    Description: Name of the database to use
    Default: monolithDB
  fargateCPU:
    Type: String
    Description: Fargate CPU units
    AllowedValues:
        - 256
        - 512
        - 1024
        - 2048
        - 4096
    Default: '<%= app.fargate.CPU %>'
  fargateMemory:
    Type: String
    Description: Amount of memory available for Fargate
    AllowedPattern: (512MB)|([1-3]?\dGB)
    Default: <%= app.fargate.memory %>
  vpcID:
    Type: String
    Description: VPC Target
    Default: <%= aws.vpc.id %>
  elbSubnets:
    Type: CommaDelimitedList
    Description: List of subnets to use
    Default: <%= aws.vpc.elbSubnets.join(', ') %>
  appSubnets:
    Type: CommaDelimitedList
    Description: List of subnets to use
    Default: <%= aws.vpc.appSubnets.join(', ') %>
  AppDeployUsingPublicIP:
    Type: String
    Description: Should the Application be Deployed with a Public IP
    Default: <%= aws.vpc.appSubnetsLaunchWithPublicIP ? 'ENABLED' : 'DISABLED' %>
  vpcCIDR:
    Type: String
    Description: CIDR IPv4 range for the VPC
    Default: <%= aws.vpc.cidr %>
  TaskCount:
    Type: Number
    Description: Desired task count
    Default: <%= app.fargate.taskCount %>
  databaseSize:
    Type: String
    Description: Size of the Aurora Instance
    Default: <%= app.database.size %>
  databaseUsername:
    Type: String
    Description: Database username
    Default: <%= app.baseName %>
  databasePassword:
    Type: String
    Description: Database password
    NoEcho: true
Conditions:
  DeployService: !Equals [ !Ref shouldDeployService, 'true' ]
Resources:
  simlifeRunRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  simlifeRunPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn:
     - simlifeRunRole
     - SimlifeContainerRegistry
     - SimlifeLogGroup
    Properties:
      PolicyName: "simlifeRunRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        # ECR Permissions
          -
            Effect: "Allow"
            Action:
             - "ecr:GetAuthorizationToken"
            Resource: '*'
          -
            Effect: "Allow"
            Action:
             - "ecr:BatchCheckLayerAvailability"
             - "ecr:GetDownloadUrlForLayer"
             - "ecr:GetRepositoryPolicy"
             - "ecr:DescribeRepositories"
             - "ecr:ListImages"
             - "ecr:DescribeImages"
             - "ecr:BatchGetImage"
            Resource: !GetAtt SimlifeContainerRegistry.Arn
        # LogStream Persmissions
          -
            Effect: "Allow"
            Action:
             - "logs:PutLogEvents"
             - "logs:CreateLogStream"
            Resource: !GetAtt SimlifeLogGroup.Arn
          - Effect: "Allow"
            Action:
             - "ssm:GetParameter"
             - "ssm:GetParametersByPath"
            Resource: !Join ['', ['arn:aws:ssm:',!Ref 'AWS::Region',':', !Ref 'AWS::AccountId', ':parameter/', !Ref parentStackName,'/*' ]]
      Roles:
        - !Ref simlifeRunRole
  SimlifeInternalSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Internal Simlife Container Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: !Ref vpcCIDR
      VpcId: !Ref vpcID
  SimlifeDatabaseSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
    - SimlifeInternalSG
    Properties:
      GroupDescription: Internal Simlife Database Security Group
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt SimlifeInternalSG.GroupId
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt SimlifeInternalSG.GroupId
      - IpProtocol: udp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt SimlifeInternalSG.GroupId
      VpcId: !Ref vpcID
  SimlifeInternetSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: External Simlife Container Security Group for ALB
      VpcId: !Ref vpcID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        DestinationSecurityGroupId: !Ref SimlifeInternalSG
  SimlifeContainerRegistry:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref repositoryName
  SimlifeLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
# Database
  SimlifeDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
        DBSubnetGroupDescription: "Simlife Aurora DB Cluster"
        SubnetIds: !Ref appSubnets
  SimlifeRDSCluster:
    Type: AWS::RDS::DBCluster
    DependsOn:
    - SimlifeDatabaseSG
    DeletionPolicy: Delete
    Properties:
      DatabaseName: !Ref databaseName
      MasterUsername: !Ref databaseUsername
      MasterUserPassword: !Ref databasePassword
      DBClusterParameterGroupName: <%= app.auroraClusterParameterGroupName %>
      VpcSecurityGroupIds:
      - !GetAtt SimlifeDatabaseSG.GroupId
      # need to toggle between aurora, aurora-postgresql
      Engine: <%= app.auroraEngine %>
      DBSubnetGroupName:
        Ref: SimlifeDBSubnetGroup
<% for (inst = 1; inst <= app.database.instances; inst++) { %>
  SimlifeRDSDBInstance<%= inst %>:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBSubnetGroupName: !Ref SimlifeDBSubnetGroup
      DBParameterGroupName: !Ref SimlifeRDSDBParameterGroup
      Engine: <%= app.auroraEngine %>
      DBClusterIdentifier: !Ref SimlifeRDSCluster
      DBInstanceClass: !Ref databaseSize<%} %>
  SimlifeRDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: CloudFormation Sample Aurora Parameter Group
      Family: <%= app.auroraFamily %>
      Parameters:
        <%= app.auroraDbParam %>
  SimlifeMonoTask:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
        - SimlifeCluster
        - simlifeRunRole
    Properties:
      Cpu: !Ref fargateCPU
      Memory: !Ref fargateMemory
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref simlifeRunRole ]]
      #This role is required by Fargate tasks to pull container images and publish container logs to Amazon CloudWatch on your behalf.
      ExecutionRoleArn: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref simlifeRunRole ]]
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: SimlifeMonolith
          Image: !Join [ '', [ !Ref 'AWS::AccountId','.dkr.ecr.',!Ref 'AWS::Region','.amazonaws.com/', !Ref repositoryName ] ]
          Cpu: !Ref fargateCPU
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SimlifeLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: awslogs-simlife
          Environment:
            - Name: JAVA_OPTS
              Value: '-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses'
            - Name: SPRING_PROFILES_ACTIVE
              Value: 'prod,swagger,aws'
            - Name: SPRING_DATASOURCE_URL
              Value: !Join ['',['jdbc:', <%= app.dbType %> ,'://',!GetAtt SimlifeRDSCluster.Endpoint.Address ,':', !GetAtt SimlifeRDSCluster.Endpoint.Port,'/', !Ref databaseName]]
            - Name: SPRING_DATASOURCE_USERNAME
              Value: !Ref databaseUsername
#            - Name: SPRING_DATASOURCE_PASSWORD
#              Value: !Ref databasePassword
            - Name: SIMLIFE_SLEEP
              Value: '0'
            - Name: CLOUD_AWS_STACK_NAME
              Value: !Ref parentStackName
          MemoryReservation: '1024'
          Essential: 'true'
  SimlifeCluster:
    Type: 'AWS::ECS::Cluster'
    Properties: {}
  SimlifeLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: !Ref elbSubnets
      SecurityGroups:
      - !Ref SimlifeInternetSG
  SimlifeALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref vpcID
      HealthCheckIntervalSeconds: 30
  SimlifeALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SimlifeALBTargetGroup
      LoadBalancerArn: !Ref SimlifeLoadBalancer
      Port: '80'
      Protocol: HTTP
  SimlifeAppService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - SimlifeALBListener
      - SimlifeALBTargetGroup
      - simlifeRunRole
    Condition: DeployService
    Properties:
      Cluster: !Ref SimlifeCluster
      DesiredCount: !Ref TaskCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref AppDeployUsingPublicIP
          SecurityGroups:
            - !GetAtt SimlifeInternalSG.GroupId
            - !GetAtt SimlifeDatabaseSG.GroupId
          Subnets: !Ref appSubnets
      LoadBalancers:
        - ContainerName: SimlifeMonolith
          ContainerPort: 8080
          TargetGroupArn: !Ref SimlifeALBTargetGroup
      TaskDefinition: !Ref SimlifeMonoTask
Outputs:
  LoadBalancerOutput:
    Description: The external DNS address of the load-balanancer
    Value: !GetAtt SimlifeLoadBalancer.DNSName
